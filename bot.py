import os
import time
import random
import re
import asyncio
import logging
import telegram

sub_cache: dict[int, tuple[bool, float]] = {}
SUB_TTL = 30  # —Å–µ–∫—É–Ω–¥

async def is_user_subscribed(bot, user_id):
    cached = sub_cache.get(user_id, (None, 0))
    ok, ts = cached
    if ok is not None and time.time() - ts < SUB_TTL:
        return ok
    try:
        for ch in CHANNELS:
            member = await bot.get_chat_member(ch["username"], user_id)
            if member.status not in ("member", "administrator", "creator"):
                sub_cache[user_id] = (False, time.time())
                return False
        sub_cache[user_id] = (True, time.time())
        return True
    except telegram.error.RetryAfter as e:
        await asyncio.sleep(e.retry_after)
        return await is_user_subscribed(bot, user_id)
    except Exception:
        sub_cache[user_id] = (False, time.time())
        return False
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from telegram.error import BadRequest, NetworkError
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BotCommand,
    Update,
    InputMediaPhoto,
)
from collections import Counter
from functools import wraps
import handlers
import db_pg as db
from helpers.leveling import xp_to_next
from helpers import shorten_number, format_ranking_row, format_my_rank
from helpers.permissions import ADMINS, is_admin, admin_only

async def check_subscribe_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    if await is_user_subscribed(context.bot, user_id):
        try:
            await query.delete_message()
        except Exception:
            pass
        await context.bot.send_message(
            chat_id=user_id,
            text=(
                "üéâ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                "–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞. –í–≤–µ–¥–∏ /start –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é."
            )
        )
    else:
        await query.answer("‚ùóÔ∏è –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", show_alert=True)

def require_subscribe(func):
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        # –≤–æ—Ç —Ç—É—Ç ‚Äî –µ—Å–ª–∏ –∞–¥–º–∏–Ω, –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        if is_admin(user_id):
            return await func(update, context, *args, **kwargs)
        if not await is_user_subscribed(context.bot, user_id):
            await start(update, context)
            return
        return await func(update, context, *args, **kwargs)
    return wrapper


TOKEN = "7649956181:AAErINkWzZJ7BofoorAHxc2fLXMPoaCjkQM"
CARD_COOLDOWN = 3 * 60 * 60  # 3 —á–∞—Å–∞
CHANNELS = [
    {"username": "@HOCKEY_CARDS_NHL", "name": "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª", "link": "https://t.me/HOCKEY_CARDS_NHL"},
    {"username": "@Hockey_cards_nhl_chat", "name": "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —á–∞—Ç", "link": "https://t.me/Hockey_cards_nhl_chat"}
]


RARITY_RU = {
    "legendary": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è ‚≠êÔ∏è",
    "mythic":    "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è üü•",
    "epic":      "–≠–ø–∏—á–µ—Å–∫–∞—è üíé",
    "rare":      "–†–µ–¥–∫–∞—è üîµ",
    "common":    "–û–±—ã—á–Ω–∞—è üü¢",
}

# Short versions without emoji
RARITY_RU_SHORT = {
    "legendary": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è",
    "mythic": "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è",
    "epic": "–≠–ø–∏—á–µ—Å–∫–∞—è",
    "rare": "–†–µ–¥–∫–∞—è",
    "common": "–û–±—ã—á–Ω–∞—è",
}

# Plural forms for grouped lists
RARITY_RU_PLURAL = {
    "legendary": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ",
    "mythic": "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ",
    "epic": "–≠–ø–∏—á–µ—Å–∫–∏–µ",
    "rare": "–†–µ–¥–∫–∏–µ",
    "common": "–û–±—ã—á–Ω—ã–µ",
}

RARITY_ORDER = {
    "legendary": 0,
    "mythic": 1,
    "epic": 2,
    "rare": 3,
    "common": 4
}

RARITY_EMOJI = {
    "legendary": "‚≠êÔ∏è",
    "mythic": "üü•",
    "epic": "üíé",
    "rare": "üîµ",
    "common": "üü¢",
}

RARITY_WEIGHTS = {
    "legendary": 1,
    "mythic":    2,
    "epic":      6,
    "rare":      18,
    "common":    73,
}

RARITY_MULTIPLIERS = {
    "common": 1,
    "rare": 1.3,
    "epic": 1.8,
    "mythic": 2.5,
    "legendary": 4
}

# --- –ö—ç—à –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ ---
CARD_FIELDS = [
    "id", "name", "img", "pos", "country", "born", "height",
    "weight", "rarity", "stats", "team_en", "team_ru"
]
CARD_CACHE = {}
RANK_CACHE: dict[int, tuple[int, int, float]] = {}
SCORE_CACHE: dict[int, tuple[float, float]] = {}
TOP_CACHE: tuple[list[tuple[int, str | None, float, int]], float] = ([], 0)
RANK_TTL = 600  # seconds
SCORE_TTL = 600  # seconds
TOP_TTL = 600  # seconds

def load_card_cache(force=False):
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –ø–∞–º—è—Ç—å –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –ë–î."""
    global CARD_CACHE
    if CARD_CACHE and not force:
        return
    conn = get_db()
    c = conn.cursor()
    c.execute(
        "SELECT id, name, img, pos, country, born, height, weight, rarity, stats, team_en, team_ru FROM cards"
    )
    rows = c.fetchall()
    conn.close()
    CARD_CACHE = {
        row[0]: dict(zip(CARD_FIELDS, row))
        for row in rows
    }

def get_card_from_cache(card_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ –∏–∑ –∫—ç—à–∞, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç –µ—ë."""
    if card_id not in CARD_CACHE:
        conn = get_db()
        c = conn.cursor()
        c.execute(
            "SELECT id, name, img, pos, country, born, height, weight, rarity, stats, team_en, team_ru FROM cards WHERE id=?",
            (card_id,),
        )
        row = c.fetchone()
        conn.close()
        if row:
            CARD_CACHE[card_id] = dict(zip(CARD_FIELDS, row))
        else:
            return None
    return CARD_CACHE.get(card_id)

def refresh_card_cache(card_id):
    """–û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã –∏–ª–∏ –æ—á–∏—â–∞–µ–º –µ—ë."""
    conn = get_db()
    c = conn.cursor()
    c.execute(
        "SELECT id, name, img, pos, country, born, height, weight, rarity, stats, team_en, team_ru FROM cards WHERE id=?",
        (card_id,),
    )
    row = c.fetchone()
    conn.close()
    if row:
        CARD_CACHE[card_id] = dict(zip(CARD_FIELDS, row))
    else:
        CARD_CACHE.pop(card_id, None)

POS_RU = {
    "C": "–¶–µ–Ω—Ç—Ä",
    "LW": "–õ–µ–≤—ã–π –Ω–∞–ø.",
    "RW": "–ü—Ä–∞–≤—ã–π –Ω–∞–ø.",
    "D": "–ó–∞—â–∏—Ç–Ω–∏–∫",
    "G": "–í—Ä–∞—Ç–∞—Ä—å"
}

ISO3_TO_FLAG = {
    "CAN": "üá®üá¶", "USA": "üá∫üá∏", "RUS": "üá∑üá∫", "FIN": "üá´üáÆ", "SWE": "üá∏üá™",
    "CZE": "üá®üáø", "SVK": "üá∏üá∞", "DEU": "üá©üá™", "GER": "üá©üá™", "CHE": "üá®üá≠",
    "AUT": "üá¶üáπ", "DNK": "üá©üá∞", "DEN": "üá©üá∞", "NLD": "üá≥üá±", "NOR": "üá≥üá¥",
    "LVA": "üá±üáª", "BLR": "üáßüáæ", "UKR": "üá∫üá¶", "KAZ": "üá∞üáø", "EST": "üá™üá™",
    "SVN": "üá∏üáÆ", "FRA": "üá´üá∑", "LTU": "üá±üáπ"
}

admin_no_cooldown = set()
CARDS_PER_PAGE = 50

# --- –î–ª—è –æ–±–º–µ–Ω–æ–≤ ---
pending_trades = {}
trade_confirmations = {}
# --- –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫ ---
admin_edit_state = {}


TRADE_NHL_PHRASES = [
    "–ë–ª–æ–∫–±–∞—Å—Ç–µ—Ä —Ç—Ä–µ–π–¥! üö®",
    "–≠—Ç–æ –æ–±–º–µ–Ω –¥–µ—Å—è—Ç–∏–ª–µ—Ç–∏—è! ü§Ø",
    "–í–∞—É, –∫–∞–∫–∞—è —Å–¥–µ–ª–∫–∞! üèí",
    "–°–¥–µ–ª–∫–∞ –Ω–µ–¥–µ–ª–∏ ‚Äî –∞–ø–ª–æ–¥–∏—Å–º–µ–Ω—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º! üëè",
    "–ù–∞—Å—Ç–æ—è—â–∏–π –æ–±–º–µ–Ω –∑–≤—ë–∑–¥! üåü",
    "–≠—Ç–∏ GM –∑–Ω–∞—é—Ç —Å–≤–æ—ë –¥–µ–ª–æ!",
    "–û–±–º–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–π–¥—ë—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é NHL! üìö",
    "–ü–æ—Ö–æ–∂–µ, –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞–ª–∞ —Ç–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–µ–µ!",
    "–ì–ª–∞–≤–Ω—ã–π —Ç—Ä–µ–π–¥ —ç—Ç–æ–π –∑–∏–º—ã! ‚ùÑÔ∏è",
    "–®–æ–∫–∏—Ä—É—é—â–∏–π –æ–±–º–µ–Ω! üî•",
    "–ú–æ–ª–Ω–∏—è –≤ —à–∞–ø–∫–µ! ‚ö°Ô∏è",
    "–î–≤–∞ –ª–∏–¥–µ—Ä–∞ –ø–æ–º–µ–Ω—è–ª–∏—Å—å –¥–æ–º–∞–º–∏!",
    "–í–µ—Å—å –º–∏—Ä —Ö–æ–∫–∫–µ—è –æ–±—Å—É–∂–¥–∞–µ—Ç —ç—Ç–æ—Ç –æ–±–º–µ–Ω!",
    "–í —Ä–∞–∑–¥–µ–≤–∞–ª–∫–µ ‚Äî —Ç–æ–ª—å–∫–æ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –æ–± —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ!",
    "–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã ‚Äî –æ–±–º–µ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω!",
]

def get_db():
    return db.get_db()

def setup_db():
    conn = get_db()
    c = conn.cursor()
    c.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, last_card_time INTEGER)')
    try:
        c.execute("ALTER TABLE users ADD COLUMN last_week_score INTEGER DEFAULT 0")
    except Exception:
        pass
    try:
        c.execute("ALTER TABLE users ADD COLUMN referrals_count INTEGER DEFAULT 0")
    except Exception:
        pass
    try:
        c.execute("ALTER TABLE users ADD COLUMN invited_by INTEGER DEFAULT NULL")
    except Exception:
        pass
    try:
        c.execute("ALTER TABLE users ADD COLUMN xp INTEGER DEFAULT 0")
    except Exception:
        pass
    try:
        c.execute("ALTER TABLE users ADD COLUMN level INTEGER DEFAULT 1")
    except Exception:
        pass
    try:
        c.execute("ALTER TABLE users ADD COLUMN xp_daily INTEGER DEFAULT 0")
    except Exception:
        pass
    try:
        c.execute("ALTER TABLE users ADD COLUMN last_xp_reset DATE")
        c.execute("UPDATE users SET last_xp_reset = DATE('now') WHERE last_xp_reset IS NULL")
    except Exception:
        pass
    try:
        c.execute("ALTER TABLE users ADD COLUMN win_streak INTEGER DEFAULT 0")
    except Exception:
        pass
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü ...
    conn.commit()
    conn.close()
    load_card_cache(force=True)

def wrap_line(text, length=35):
    words = text.split()
    lines = []
    line = ''
    for word in words:
        if len(line) + len(word) + 1 <= length:
            line += (word + ' ')
        else:
            lines.append(line.strip())
            line = word + ' '
    if line:
        lines.append(line.strip())
    return "\n".join(lines)

def weighted_random_rarity():
    rarities = list(RARITY_WEIGHTS.keys())
    weights = list(RARITY_WEIGHTS.values())
    return random.choices(rarities, weights=weights, k=1)[0]

def pos_to_rus(pos):
    parts = [p.strip().upper() for p in pos.replace("\\", "/").split("/")]
    rus_parts = [POS_RU.get(p, p) for p in parts if p]
    return "/".join(rus_parts) if rus_parts else pos

def flag_from_iso3(iso):
    return ISO3_TO_FLAG.get((iso or "").upper(), "")

def _get_random_card_sync():
    conn = get_db()
    c = conn.cursor()
    rarity = weighted_random_rarity()
    c.execute(
        'SELECT * FROM cards WHERE rarity=? '
        'AND img NOT LIKE "%default-skater.png%" '
        'AND img NOT LIKE "%default-goalie.png%" '
        'AND img != "" AND img IS NOT NULL '
        'ORDER BY RANDOM() LIMIT 1',
        (rarity,)
    )
    row = c.fetchone()
    conn.close()
    if row:
        fields = ["id", "name", "img", "pos", "country", "born", "height", "weight", "rarity", "stats", "team_en", "team_ru"]
        return dict(zip(fields, row))
    return None

async def get_random_card(*args, **kwargs):
    return await asyncio.to_thread(_get_random_card_sync, *args, **kwargs)

def _get_user_cards_sync(user_id):
    conn = get_db()
    c = conn.cursor()
    c.execute("SELECT card_id FROM inventory WHERE user_id=?", (user_id,))
    rows = [r[0] for r in c.fetchall()]
    conn.close()

    card_counts = Counter(rows)
    cards = []
    for card_id, count in card_counts.items():
        card = get_card_from_cache(card_id)
        if card:
            s = f"{card['name']} ({RARITY_RU.get(card['rarity'], card['rarity'])})"
            if count > 1:
                s += f" x{count}"
            cards.append(s)
    return cards

async def get_user_cards(*args, **kwargs):
    return await asyncio.to_thread(_get_user_cards_sync, *args, **kwargs)

async def send_ranking_push(user_id, context, chat_id):
    # —Ç–µ–ø–µ—Ä—å –ø—É—à–∏–º –≤—Å–µ–º (–º–æ–∂–Ω–æ –∏ –∞–¥–º–∏–Ω–∞–º)
    rank, total = await get_user_rank_cached(user_id)
    if rank > total:
        return
    if rank <= 5:
        msg = f"–¢—ã —É–∂–µ –≤ –¢–û–ü-5 ‚Äî –∫—Ä—É—Ç–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π —Å–æ–±–∏—Ä–∞—Ç—å –∏ –¥–µ—Ä–∂–∏—Å—å –≤ –ª–∏–¥–µ—Ä–∞—Ö! üèí"
    else:
        top5 = await get_top_users(limit=5)
        user_score = await get_user_score_cached(user_id)
        if len(top5) == 5:
            score5 = int(top5[4][2])
            delta = int(score5 - user_score)
            need = delta + 1 if delta >= 0 else 0
        else:
            need = 0
        msg = f"–¢—ã —É–∂–µ #{rank} –∏–∑ {total}! "
        if need > 0:
            msg += f"–î–æ —Ç–æ–ø-5 –≤—Å–µ–≥–æ {need} –æ—á–∫{'–∞' if need%10 in [2,3,4] and need%100 not in [12,13,14] else '–æ–≤'}, –Ω–µ —Å–¥–∞–≤–∞–π—Å—è! üí™"
        else:
            msg += "–£–∂–µ –ø–æ—á—Ç–∏ –≤ —Ç–æ–ø–µ!"
    await context.bot.send_message(chat_id, msg)


async def _send_rank_text(update: Update, text: str) -> None:
    """Send ranking text in response to a message or callback."""
    if getattr(update, "message", None):
        await update.message.reply_text(text)
        return
    if getattr(update, "callback_query", None):
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(text)
        return

# ------- –û–ß–ö–ò –∏ –†–ï–ô–¢–ò–ù–ì–ò -----------
def parse_points(stats, pos):
    if pos == "G":
        win = 0
        gaa = 3.0
        m_win = re.search(r'–ü–æ–±\s+(\d+)', stats or "")
        m_gaa = re.search(r'–ö–ù\s*([\d.]+)', stats or "")
        if m_win:
            win = int(m_win.group(1))
        if m_gaa:
            gaa = float(m_gaa.group(1))
        return win * 2 + (30 - gaa * 10)
    else:
        m = re.search(r'–û—á–∫–∏\s+(\d+)', stats or "")
        return int(m.group(1)) if m else 0

def extract_points(stats: str | None) -> str:
    """Return points value from stats for field players as string."""
    m = re.search(r"–û—á–∫–∏\s+(\d+)", stats or "")
    return m.group(1) if m else "0"

def extract_goalie_stats(stats: str | None) -> tuple[str, str]:
    """Return wins and GAA (–ö–ù) from goalie stats as strings."""
    m_win = re.search(r"–ü–æ–±\s+(\d+)", stats or "")
    wins = m_win.group(1) if m_win else "0"
    m_kn = re.search(r"–ö–ù\s*([\d.,]+)", stats or "")
    kn = m_kn.group(1) if m_kn else "0"
    return wins, kn

def format_card_caption(
    card: dict,
    *,
    index: int = 0,
    total: int = 1,
    filter_name: str = "",
    total_cards: int | None = None,
    show_filter: bool = True,
) -> str:
    """Return formatted caption for a card."""
    pos = card.get("pos") or ""
    pos_ru = pos_to_rus(pos)
    flag = flag_from_iso3(card.get("country"))
    iso = (card.get("country") or "").upper()
    club = (card.get("team_ru") or card.get("team_en") or "‚Äî").strip()
    rarity = card.get("rarity", "common")
    rarity_ru = RARITY_RU_SHORT.get(rarity, rarity)
    rarity_emoji = RARITY_EMOJI.get(rarity, "")

    parts = [
        f"*{card.get('name','?')}*",
        f"_{rarity_emoji} {rarity_ru} –∫–∞—Ä—Ç–∞_",
        "",
        f"*–ö–ª—É–±:* {club}",
        f"*–ê–º–ø–ª—É–∞:* {'–í—Ä–∞—Ç–∞—Ä—å' if pos == 'G' else pos_ru}",
        f"*–°—Ç—Ä–∞–Ω–∞:* {flag} {iso}",
        "",
    ]

    stats = card.get("stats", "")
    if pos == "G":
        wins, kn = extract_goalie_stats(stats)
        parts.append(f"üìä *–ü–æ–±–µ–¥—ã:* {wins}")
        parts.append(f"*–ö–ù:* {kn}")
    else:
        pts = extract_points(stats)
        parts.append(f"üìä *–û—á–∫–∏:* {pts}")
    parts.append("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")

    if show_filter:
        parts.append(f"[{index+1} –∏–∑ {total} | –§–∏–ª—å—Ç—Ä: {filter_name}]")
    if total_cards is not None:
        parts.append(f"üì¶ –í—Å–µ–≥–æ: {total_cards} –∫–∞—Ä—Ç")

    return "\n".join(filter(None, parts))

def _calculate_user_score_sync(user_id):
    conn = get_db()
    c = conn.cursor()
    c.execute("SELECT card_id FROM inventory WHERE user_id=?", (user_id,))
    card_ids = [row[0] for row in c.fetchall()]
    conn.close()

    counts = Counter(card_ids)
    total_score = 0
    for card_id, count in counts.items():
        card = get_card_from_cache(card_id)
        if not card:
            continue
        pos = card["pos"]
        stats = card["stats"]
        rarity = card["rarity"]
        points = parse_points(stats, pos)
        mult = RARITY_MULTIPLIERS.get(rarity, 1)
        total_score += points * mult * count

    return total_score

async def calculate_user_score(*args, **kwargs):
    return await asyncio.to_thread(_calculate_user_score_sync, *args, **kwargs)

def get_user_score_cached_sync(user_id: int) -> float:
    cached = SCORE_CACHE.get(user_id)
    if cached and time.time() - cached[1] < SCORE_TTL:
        return cached[0]
    score = _calculate_user_score_sync(user_id)
    SCORE_CACHE[user_id] = (score, time.time())
    return score

async def get_user_score_cached(user_id: int) -> float:
    return await asyncio.to_thread(get_user_score_cached_sync, user_id)

def _get_user_rank_sync(user_id):
    conn = get_db()
    c = conn.cursor()
    c.execute("SELECT id FROM users")
    # –ò—Å–∫–ª—é—á–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ –∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞
    user_ids = [row[0] for row in c.fetchall() if not is_admin(row[0])]
    scores = []
    for uid in user_ids:
        score = get_user_score_cached_sync(uid)
        scores.append((uid, score))
    scores.sort(key=lambda x: x[1], reverse=True)
    total = len(scores)
    for idx, (uid, _) in enumerate(scores):
        if uid == user_id:
            rank = idx + 1
            break
    else:
        rank = total
    conn.close()
    return rank, total

async def get_user_rank(user_id):
    conn = get_db()
    c = conn.cursor()
    c.execute("SELECT id FROM users")
    user_ids = [row[0] for row in c.fetchall() if not is_admin(row[0])]
    conn.close()
    scores = await asyncio.gather(*[get_user_score_cached(uid) for uid in user_ids])
    pairs = list(zip(user_ids, scores))
    pairs.sort(key=lambda x: x[1], reverse=True)
    total = len(pairs)
    for idx, (uid, _) in enumerate(pairs):
        if uid == user_id:
            rank = idx + 1
            break
    else:
        rank = total
    return rank, total


async def get_user_rank_cached(user_id):
    cached = RANK_CACHE.get(user_id)
    if cached and time.time() - cached[2] < RANK_TTL:
        return cached[0], cached[1]
    rank, total = await get_user_rank(user_id)
    RANK_CACHE[user_id] = (rank, total, time.time())
    return rank, total

def get_weekly_progress(user_id):
    conn = get_db()
    c = conn.cursor()
    c.execute("SELECT last_week_score FROM users WHERE id=?", (user_id,))
    row = c.fetchone()
    conn.close()
    current = get_user_score_cached_sync(user_id)
    last = row[0] if row else 0
    return current - last

def _get_top_users_sync(limit=10):
    conn = get_db()
    c = conn.cursor()
    c.execute("SELECT id, username, level FROM users")
    # –ò—Å–∫–ª—é—á–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ –∏–∑ —Ç–æ–ø–∞
    users = [(uid, uname, lvl) for (uid, uname, lvl) in c.fetchall() if not is_admin(uid)]
    user_scores = []
    for uid, uname, lvl in users:
        score = get_user_score_cached_sync(uid)
        user_scores.append((uid, uname, score, lvl))
    user_scores.sort(key=lambda x: x[2], reverse=True)
    conn.close()
    return user_scores[:limit]

async def get_top_users(*args, **kwargs):
    limit = kwargs.get('limit', 10)
    data, ts = TOP_CACHE
    if data and time.time() - ts < TOP_TTL and len(data) >= limit:
        return data[:limit]
    result = await asyncio.to_thread(_get_top_users_sync, limit)
    globals()['TOP_CACHE'] = (result, time.time())
    return result

# ------- –ö–û–ú–ê–ù–î–´ –†–ï–ô–¢–ò–ù–ì–ê ----------
@require_subscribe
async def me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if is_admin(user_id):
        await update.message.reply_text("–£ –∞–¥–º–∏–Ω–æ–≤ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.")
        return
    rank, total = await get_user_rank_cached(user_id)
    progress = get_weekly_progress(user_id)
    score = await get_user_score_cached(user_id)
    xp, lvl = db.get_xp_level(user_id)
    to_next = xp_to_next(xp)
    unique_cnt, total_cnt = get_inventory_counts(user_id)
    medal = "ü•á" if rank == 1 else "ü•à" if rank == 2 else "ü•â" if rank == 3 else ""
    msg = (
        f"üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"‚Ä¢ –û—á–∫–∏: {int(score)}\n"
        f"‚Ä¢ –ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: #{rank} –∏–∑ {total} {medal}\n"
        f"‚Ä¢ –ü—Ä–∏—Ä–æ—Å—Ç –∑–∞ –Ω–µ–¥–µ–ª—é: {('+' if progress >= 0 else '')}{int(progress)} –æ—á–∫{'–∞' if abs(progress)%10 in [2,3,4] else ''}{' ‚Äî –º–æ–ª–æ–¥–µ—Ü!' if progress > 0 else ''}"
        f"\n‚Ä¢ –£—Ä–æ–≤–µ–Ω—å Lv {lvl}  (–¥–æ ‚Üë {to_next} XP)"
        f"\nüì¶ –ö–æ–ª–ª–µ–∫—Ü–∏—è: {total_cnt} –∫–∞—Ä—Ç (—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {unique_cnt})"
    )
    if rank <= 10:
        msg += "\nüèÖ –¢—ã –≤ –¢–û–ü-10 –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä–æ–≤!"
    referrals = get_referral_count(user_id)
    achv = get_ref_achievement(referrals)
    msg += f"\n\nüë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {referrals}"
    if achv:
        msg += f"\n{achv}"
    await update.message.reply_text(msg)

@require_subscribe
async def xp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    xp, lvl = db.get_xp_level(uid)
    cap = 150 * (lvl ** 2)
    bar_fill = int(10 * xp / cap)
    bar = '‚ñì' * bar_fill + '‚ñë' * (10 - bar_fill)
    await update.message.reply_text(
        f"üìà Lv {lvl} {bar}  {xp}/{cap} XP"
    )

@require_subscribe
async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db()
    c = conn.cursor()
    c.execute("SELECT id, username, level FROM users")
    rows = [(u, n, l) for u, n, l in c.fetchall() if not is_admin(u)]
    conn.close()

    scores = await asyncio.gather(*[get_user_score_cached(u) for u, _, _ in rows])
    pairs = [(u, n, s, l) for (u, n, l), s in zip(rows, scores)]
    pairs.sort(key=lambda x: x[2], reverse=True)

    lines = ["üèÜ –¢–û–ü –ø–æ –æ—á–∫–∞–º:", ""]
    for i, (uid, uname, score, lvl) in enumerate(pairs[:10], 1):
        name = f"@{uname}" if uname else f"ID:{uid}"
        lines.append(f"{i}. {name}")
        lines.append(f"üî• {shorten_number(int(score))} –æ—á–∫–æ–≤  üîº {lvl} —É—Ä.")
        lines.append("")

    user_id = update.effective_user.id
    total = len(pairs)
    rank = next((idx + 1 for idx, (u, _, _, _) in enumerate(pairs) if u == user_id), total)
    score = int(await get_user_score_cached(user_id))
    _, lvl = db.get_xp_level(user_id)
    lines.append(f"üëÄ –¢—ã ‚Äî #{rank} –∏–∑ {total}")
    lines.append(f"üî• {shorten_number(score)} –æ—á–∫–æ–≤  üîº {lvl} —É—Ä.")
    if rank > 1:
        diff = int(pairs[rank-2][2] - score)
        lines.append(f"üöÄ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—Ç–∞: {shorten_number(diff)} –æ—á–∫–æ–≤")

    text = "\n".join(lines).rstrip()
    await _send_rank_text(update, text)

@require_subscribe


@admin_only
async def resetweek(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = get_db()
    c = conn.cursor()
    c.execute("SELECT id FROM users")
    users = c.fetchall()
    for (uid,) in users:
        score = await get_user_score_cached(uid)
        c.execute("UPDATE users SET last_week_score=? WHERE id=?", (score, uid))
    conn.commit()
    conn.close()
    await update.message.reply_text("‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø—Ä–∏—Ä–æ—Å—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤.")

# -------- start —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –∞–¥–º–∏–Ω–∞ ----------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or ""

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
    if not await is_user_subscribed(context.bot, user_id):
        buttons = [
            [InlineKeyboardButton(f"üîî {ch['name']}", url=ch['link'])] for ch in CHANNELS
        ]
        buttons.append([InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscribe")])

        text = (
            "üèí *–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤!*\n\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞:\n" +
            "\n".join([f"‚Ä¢ [{ch['name']}]({ch['link']})" for ch in CHANNELS]) +
            "\n\n"
            "–ó–∞—á–µ–º —ç—Ç–æ?\n"
            "‚Äî –¢–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏, —Ç—Ä–µ–π–¥—ã –∏ –ø—Ä–∏–∑—ã\n"
            "‚Äî –ù–æ–≤–æ—Å—Ç–∏, –∫–æ–Ω–∫—É—Ä—Å—ã, –æ–±—â–µ–Ω–∏–µ\n"
            "1. –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞\n"
            "2. –ñ–º–∏ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'"
        )
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(buttons), parse_mode="Markdown")
        return

    # --- –í—Å—ë —á—Ç–æ –Ω–∏–∂–µ ‚Äî –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏! ---
    conn = get_db()
    c = conn.cursor()
    c.execute(
        (
            "INSERT INTO users (id, username, last_card_time, invited_by, referrals_count) "
            "VALUES (?, ?, 0, NULL, 0) ON CONFLICT (id) DO NOTHING"
        ),
        (user_id, username),
    )

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ ---
    if context.args and context.args[0].isdigit():
        referrer_id = int(context.args[0])
        if referrer_id != user_id:  # –Ω–µ–ª—å–∑—è —Å–∞–º–æ–º—É —Å–µ–±—è –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å
            c.execute("SELECT invited_by FROM users WHERE id=?", (user_id,))
            row = c.fetchone()
            # –µ—Å–ª–∏ –≤–ø–µ—Ä–≤—ã–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –ø–æ —Å—Å—ã–ª–∫–µ
            if not row or not row[0]:
                c.execute("UPDATE users SET invited_by=? WHERE id=?", (referrer_id, user_id))
                c.execute("UPDATE users SET referrals_count=referrals_count+1 WHERE id=?", (referrer_id,))
                # –°–ë–†–ê–°–´–í–ê–ï–ú –ö–£–õ–î–ê–£–ù –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
                c.execute("UPDATE users SET last_card_time=0 WHERE id=?", (referrer_id,))
                conn.commit()
                try:
                    await context.bot.send_message(
                        referrer_id,
                        "üéâ –ü–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—à—ë–ª –Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫!\n\n"
                        "‚è≥ –¢–≤–æ–π –∫—É–ª–¥–∞—É–Ω –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É —Å–±—Ä–æ—à–µ–Ω. –ú–æ–∂–µ—à—å –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ —Å–æ–±–∏—Ä–∞–π –∫–æ–ª–ª–µ–∫—Ü–∏—é –±—ã—Å—Ç—Ä–µ–µ."
                    )
                except Exception:
                    pass

    # --- –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã ---
    conn.commit()
    conn.close()
    text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç NHL!\n"
        "/card ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É\n"
        "/collection ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π\n"
        "/me ‚Äî —Ç–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "/rank ‚Äî —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏–≥—Ä–æ–∫–æ–≤\n"
        "/myid ‚Äî —É–∑–Ω–∞—Ç—å —Å–≤–æ–π user_id\n"
        "/trade <user_id> ‚Äî –æ–±–º–µ–Ω –∫–∞—Ä—Ç–∞–º–∏ –ø–æ Telegram ID\n"
        "/invite ‚Äî –ø—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ –∞—á–∏–≤–∫–∏!\n"
        "/team ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã –∏–∑ –∫–∞—Ä—Ç–æ—á–µ–∫\n"
        "/fight ‚Äî –±–æ–π —Å –±–æ—Ç–æ–º\n"
        "/duel ‚Äî –¥—É—ç–ª—å —Å –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º\n"
        "/duel_list ‚Äî —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞—é—â–∏—Ö –¥—É—ç–ª—å\n"
        "/history ‚Äî –∏—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –±–æ—ë–≤\n"
    )
    if is_admin(user_id):
        text += (
            "\n‚öôÔ∏è –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n"
            "/nocooldown ‚Äî —Å–Ω—è—Ç—å/–≤–µ—Ä–Ω—É—Ç—å –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏\n"
            "/deletecard <–∏–º—è –∏–≥—Ä–æ–∫–∞> ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ –∏–º–µ–Ω–∏\n"
            "/resetweek ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø—Ä–∏—Ä–æ—Å—Ç—ã\n"
            "/editcard ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ–∫–∏ (–æ—á–∫–∏ –∏ —Ä–µ–¥–∫–æ—Å—Ç—å)"
            "\n/giveallcards ‚Äî –≤—ã–¥–∞—Ç—å –≤—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏"
        )
    await update.message.reply_text(text)

@require_subscribe
async def card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    now = int(time.time())
    conn = get_db()
    c = conn.cursor()
    c.execute("SELECT last_card_time FROM users WHERE id=?", (user_id,))
    row = c.fetchone()
    last = row[0] if row else 0
    if user_id not in admin_no_cooldown:
        if now - last < CARD_COOLDOWN:
            mins = (CARD_COOLDOWN - (now - last)) // 60
            await update.message.reply_text(
                f"‚è≥ –°–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ {mins} –º–∏–Ω.\n"
                "üí° –ï—Å–ª–∏ —Ç–≤–æ–π –¥—Ä—É–≥ –∑–∞–π–¥—ë—Ç –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ –∏–∑ /invite, –∫—É–ª–¥–∞—É–Ω —Å–±—Ä–æ—Å–∏—Ç—Å—è —Å—Ä–∞–∑—É!"
            )
            conn.close()
            return
    card_obj = await get_random_card()
    if not card_obj:
        await update.message.reply_text("–í –±–∞–∑–µ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–∞–Ω–Ω–æ–≥–æ —Ä–∞—Ä–∏—Ç–µ—Ç–∞.")
        conn.close()
        return
    c.execute("INSERT INTO inventory (user_id, card_id, time_got) VALUES (?, ?, ?)", (user_id, card_obj["id"], now))
    c.execute("UPDATE users SET last_card_time=? WHERE id=?", (now, user_id))
    conn.commit()
    conn.close()

    _, total_cards = get_inventory_counts(user_id)
    caption = format_card_caption(
        card_obj,
        total_cards=total_cards,
        show_filter=False,
    )

    try:
        await context.bot.send_photo(update.message.chat_id, card_obj.get('img', ''), caption=caption, parse_mode='Markdown')
    except BadRequest:
        await update.message.reply_text(
            f"‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ –≤–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{caption}",
            parse_mode='Markdown'
        )

    context.application.create_task(
        send_ranking_push(user_id, context, update.message.chat_id)
    )

# --- TRADE (–û–ë–ú–ï–ù–´) ---

def make_card_button(card_id, name, rarity, count):
    rarity_emoji = {
        "legendary": "‚≠êÔ∏è",
        "mythic": "üü•",
        "epic": "üíé",
        "rare": "üîµ",
        "common": "üü¢"
    }.get(rarity, "üü¢")
    count_str = f"x{count}" if count > 1 else ""
    special = ""
    if rarity == "legendary":
        special = " üèÜ"
    elif rarity == "epic":
        special = " ü•à"
    elif rarity == "mythic":
        special = " üî•"
    text = f"{rarity_emoji} {name} {count_str}{special}"
    return InlineKeyboardButton(text, callback_data=f"trade_offer_{card_id}")

async def show_trade_cards(context, user_id, prompt):
    conn = get_db()
    c = conn.cursor()
    c.execute("SELECT card_id, COUNT(*) FROM inventory WHERE user_id=? GROUP BY card_id", (user_id,))
    cards = c.fetchall()
    conn.close()
    if not cards:
        await context.bot.send_message(user_id, "–£ —Ç–µ–±—è –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ–±–º–µ–Ω–∞.")
        pending_trades.pop(user_id, None)
        return
    buttons = []
    for card_id, count in cards:
        card = get_card_from_cache(card_id)
        if not card:
            continue  # –µ—Å–ª–∏ –∫–∞—Ä—Ç—ã –Ω–µ—Ç –≤ –±–∞–∑–µ ‚Äî –Ω–µ –≤—ã–≤–æ–¥–∏–º
        name = card["name"]
        rarity = card["rarity"]
        btn = [make_card_button(card_id, name, rarity, count)]
        buttons.append(btn)
    if not buttons:
        await context.bot.send_message(user_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç –¥–ª—è –æ–±–º–µ–Ω–∞.")
        pending_trades.pop(user_id, None)
        return
    markup = InlineKeyboardMarkup(buttons)
    await context.bot.send_message(user_id, prompt, reply_markup=markup)

async def show_trade_selector(context, user_id, prompt, is_acceptor=False, page=0, edit_message_id=None):
    conn = get_db()
    c = conn.cursor()
    c.execute("SELECT card_id FROM inventory WHERE user_id=?", (user_id,))
    card_ids = [r[0] for r in c.fetchall()]
    count_dict = Counter(card_ids)
    conn.close()

    if not card_ids:
        await context.bot.send_message(user_id, "–£ —Ç–µ–±—è –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ–±–º–µ–Ω–∞.")
        pending_trades.pop(user_id, None)
        return

    trade_state = pending_trades[user_id]
    selected = trade_state.get('selected', set())
    trade_state['page'] = page

    card_items = list(count_dict.items())
    card_items.sort()

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total_pages = (len(card_items) + TRADE_CARDS_PER_PAGE - 1) // TRADE_CARDS_PER_PAGE
    start = page * TRADE_CARDS_PER_PAGE
    end = start + TRADE_CARDS_PER_PAGE
    page_cards = card_items[start:end]

    buttons = []
    for card_id, count in page_cards:
        card_name, rarity = get_card_name_rarity(card_id)
        if card_name == "?":
            continue  # –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∏—Ç—ã–µ –∫–∞—Ä—Ç—ã!
        checked = "‚úÖ " if card_id in selected else ""
        btn = InlineKeyboardButton(
            f"{checked}{card_name} ({RARITY_RU.get(rarity, rarity)})",
            callback_data=f"trade_select_{card_id}"
        )
        buttons.append([btn])

    controls = []
    if selected:
        controls.append(InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="trade_confirm"))
    controls.append(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="trade_cancel"))

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="trade_page_prev"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è", callback_data="trade_page_next"))

    markup_list = []
    if nav_buttons:
        markup_list.append(nav_buttons)
    markup_list += buttons
    markup_list.append(controls)
    markup = InlineKeyboardMarkup(markup_list)

    if edit_message_id:
        await context.bot.edit_message_reply_markup(
            chat_id=user_id,
            message_id=edit_message_id,
            reply_markup=markup
        )
    else:
        await context.bot.send_message(user_id, prompt, reply_markup=markup)


# --- MULTI TRADE ---

MAX_TRADE_CARDS = 5
TRADE_CARDS_PER_PAGE = 20

@require_subscribe
async def trade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /trade <user_id>\n–ü—Ä–∏–º–µ—Ä: /trade 123456789")
        return
    partner_id = int(context.args[0])
    if partner_id == user_id:
        await update.message.reply_text("–ù–µ–ª—å–∑—è –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è —Å —Å–æ–±–æ–π!")
        return

    conn = get_db()
    c = conn.cursor()
    c.execute("SELECT username FROM users WHERE id=?", (partner_id,))
    row = c.fetchone()
    conn.close()
    if not row:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    pending_trades[user_id] = {
        'partner_id': partner_id,
        'stage': 'initiator_selecting',
        'selected': set()
    }
    pending_trades[partner_id] = {
        'partner_id': user_id,
        'stage': 'accept_offer'
    }
    await show_trade_selector(context, user_id, "–í—ã–±–µ—Ä–∏ –¥–æ 5 —Å–≤–æ–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ–±–º–µ–Ω–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):")

async def trade_page_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    if user_id not in pending_trades:
        await query.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞.")
        return
    trade_state = pending_trades[user_id]
    page = trade_state.get('page', 0)
    if query.data == "trade_page_prev":
        page = max(0, page - 1)
    elif query.data == "trade_page_next":
        page = page + 1
    try:
        await query.answer()
    except BadRequest:
        return
    await show_trade_selector(
        context, user_id,
        "–í—ã–±–µ—Ä–∏ –¥–æ 5 —Å–≤–æ–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ–±–º–µ–Ω–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        page=page,
        edit_message_id=query.message.message_id
    )

async def trade_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    if user_id not in pending_trades:
        await query.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞.")
        return

    trade_state = pending_trades[user_id]
    stage = trade_state['stage']
    partner_id = trade_state['partner_id']
    data = query.data

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
    if data == "trade_page_prev" or data == "trade_page_next":
        page = trade_state.get('page', 0)
        if data == "trade_page_prev":
            page = max(0, page - 1)
        else:
            page = page + 1
        await show_trade_selector(
            context, user_id,
            "–í—ã–±–µ—Ä–∏ –¥–æ 5 —Å–≤–æ–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ–±–º–µ–Ω–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            page=page,
            edit_message_id=query.message.message_id
        )
        try:
            await query.answer()
        except BadRequest:
            pass
        return

    # –í—ã–±–æ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏
    if data.startswith("trade_select_"):
        card_id = int(data.split("_")[2])
        sel = trade_state.get('selected', set())
        if card_id in sel:
            sel.remove(card_id)
        else:
            if len(sel) >= MAX_TRADE_CARDS:
                await query.answer(f"–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ {MAX_TRADE_CARDS} –∫–∞—Ä—Ç.")
                return
            sel.add(card_id)
        trade_state['selected'] = sel
        await show_trade_selector(
            context, user_id,
            "–í—ã–±–µ—Ä–∏ –¥–æ 5 —Å–≤–æ–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ–±–º–µ–Ω–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            page=trade_state.get('page', 0),
            edit_message_id=query.message.message_id
        )
        try:
            await query.answer()
        except BadRequest:
            pass
        return

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º ‚Äî –≤—Ç–æ—Ä–æ–º—É –∏–≥—Ä–æ–∫—É –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    if data == "trade_confirm":
        if stage == "initiator_selecting":
            if not trade_state.get('selected'):
                await query.answer("–í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ä—Ç—É –¥–ª—è –æ–±–º–µ–Ω–∞.")
                return
            pending_trades[user_id]['stage'] = 'waiting_accept'
            pending_trades[partner_id] = {
                'partner_id': user_id,
                'stage': 'accept_offer',
                'offer': set(trade_state['selected'])
            }
            card_names = [get_card_name_rarity(cid)[0] for cid in trade_state['selected']]
            text = (
                f"–¢–µ–±–µ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –æ–±–º–µ–Ω –Ω–∞ —ç—Ç–∏ –∫–∞—Ä—Ç—ã:\n"
                f"{', '.join(card_names)}\n\n"
                "–ü—Ä–∏–Ω—è—Ç—å –æ–±–º–µ–Ω?"
            )
            markup = InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data="trade_accept_offer")],
                [InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="trade_reject_offer")]
            ])
            await context.bot.send_message(partner_id, text, reply_markup=markup)
            await query.edit_message_text("–û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞...")
            return

        elif stage == "acceptor_selecting":
            if not trade_state.get('selected'):
                await query.answer("–í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ä—Ç—É –¥–ª—è –æ–±–º–µ–Ω–∞.")
                return
            offer1 = set(trade_state['offer'])
            offer2 = set(trade_state['selected'])
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ—É –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            trade_confirmations[(user_id, partner_id)] = {
                "initiator": partner_id,
                "acceptor": user_id,
                "offer1": offer1,
                "offer2": offer2,
                "confirmed": set()
            }
            await show_trade_confirmation(context, partner_id, user_id, offer1, offer2)
            await show_trade_confirmation(context, user_id, partner_id, offer1, offer2)
            await query.edit_message_text("–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±–º–µ–Ω–∞ –æ–±–æ–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏.")
            return

    # –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è ‚Äî –µ–º—É –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä —Å–≤–æ–∏—Ö –∫–∞—Ä—Ç (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞!)
    if data == "trade_accept_offer":
        trade_state['stage'] = 'acceptor_selecting'
        trade_state['selected'] = set()
        await show_trade_selector(
            context, user_id,
            "–í—ã–±–µ—Ä–∏ –¥–æ 5 —Å–≤–æ–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ–±–º–µ–Ω–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            is_acceptor=True,
            page=0,
            edit_message_id=query.message.message_id
        )
        return

    # –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç ‚Äî –æ–±–º–µ–Ω –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è —É –æ–±–æ–∏—Ö
    if data == "trade_reject_offer":
        await context.bot.send_message(user_id, "–¢—ã –æ—Ç–∫–ª–æ–Ω–∏–ª –æ–±–º–µ–Ω.")
        await context.bot.send_message(partner_id, "–¢–≤–æ–π –æ–±–º–µ–Ω –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
        pending_trades.pop(user_id, None)
        pending_trades.pop(partner_id, None)
        try:
            await query.edit_message_text("–û–±–º–µ–Ω –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
        except:
            pass
        return

    # –û—Ç–º–µ–Ω–∞ –æ–±–º–µ–Ω–∞
    if data == "trade_cancel":
        await context.bot.send_message(user_id, "–û–±–º–µ–Ω –æ—Ç–º–µ–Ω—ë–Ω.")
        await context.bot.send_message(partner_id, "–û–±–º–µ–Ω –æ—Ç–º–µ–Ω—ë–Ω –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π.")
        pending_trades.pop(user_id, None)
        pending_trades.pop(partner_id, None)
        try:
            await query.edit_message_text("–û–±–º–µ–Ω –æ—Ç–º–µ–Ω—ë–Ω.")
        except:
            pass
        return

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞
    if data == "trade_final_confirm":
        # –ù–∞–π—Ç–∏ —Ç—Ä–µ–π–¥
        found = None
        for k in trade_confirmations.keys():
            if user_id in k:
                found = k
                break
        if not found:
            await query.answer("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±–º–µ–Ω–∞.")
            return
        trade_confirmations[found]["confirmed"].add(user_id)
        if len(trade_confirmations[found]["confirmed"]) == 2:
            vals = trade_confirmations.pop(found)
            await finalize_multi_trade(
                context,
                vals["acceptor"],  # –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫
                vals["initiator"], # –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫
                vals["offer1"],
                vals["offer2"]
            )
        else:
            await query.edit_message_text("–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞...")
        return

    if data == "trade_final_cancel":
        found = None
        for k in trade_confirmations.keys():
            if user_id in k:
                found = k
                break
        if not found:
            await query.answer("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±–º–µ–Ω–∞.")
            return
        vals = trade_confirmations.pop(found)
        await context.bot.send_message(vals["initiator"], "–û–±–º–µ–Ω –æ—Ç–º–µ–Ω—ë–Ω –æ–¥–Ω–∏–º –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        await context.bot.send_message(vals["acceptor"], "–û–±–º–µ–Ω –æ—Ç–º–µ–Ω—ë–Ω –æ–¥–Ω–∏–º –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        pending_trades.pop(vals["initiator"], None)
        pending_trades.pop(vals["acceptor"], None)
        await query.edit_message_text("–û–±–º–µ–Ω –æ—Ç–º–µ–Ω—ë–Ω.")
        return

    await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")

async def show_trade_confirmation(context, uid, other_uid, offer1, offer2):
    # –ö—Ç–æ —Ç—ã: –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∏–ª–∏ –∞–∫—Ü–µ–ø—Ç–æ—Ä
    if uid == other_uid:
        return
    role = "initiator" if uid != other_uid else "acceptor"
    my_give = offer1 if uid != other_uid else offer2
    my_get  = offer2 if uid != other_uid else offer1

    def cards_to_str(cards):
        out = []
        for cid in cards:
            name, rarity = get_card_name_rarity(cid)
            out.append(f"{name} ({RARITY_RU.get(rarity, rarity)})")
        return ", ".join(out) if out else "‚Äî"

    give_names = cards_to_str(my_give)
    get_names  = cards_to_str(my_get)

    text = (
        "–ü—Ä–æ–≤–µ—Ä—å –¥–µ—Ç–∞–ª–∏ –æ–±–º–µ–Ω–∞:\n\n"
        f"–¢—ã –æ—Ç–¥–∞—ë—à—å: {give_names}\n"
        f"–¢—ã –ø–æ–ª—É—á–∞–µ—à—å: {get_names}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –æ–±–º–µ–Ω!"
    )
    markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="trade_final_confirm")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="trade_final_cancel")]
    ])
    await context.bot.send_message(uid, text, reply_markup=markup)

async def finalize_multi_trade(context, acceptor_id, initiator_id, offer1, offer2):
    # offer1 ‚Äî –∫–∞—Ä—Ç—ã –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞, offer2 ‚Äî –∫–∞—Ä—Ç—ã acceptor
    for cid in offer1:
        remove_card(initiator_id, cid)
        add_card(acceptor_id, cid)
    for cid in offer2:
        remove_card(acceptor_id, cid)
        add_card(initiator_id, cid)

    offer1_names = [get_card_name_rarity(cid)[0] for cid in offer1]
    offer2_names = [get_card_name_rarity(cid)[0] for cid in offer2]
    nhl_phrase = random.choice(TRADE_NHL_PHRASES)

    await context.bot.send_message(
        initiator_id,
        f"{nhl_phrase}\n\n"
        f"–¢—ã –æ–±–º–µ–Ω—è–ª—Å—è!\n"
        f"–û—Ç–¥–∞–ª: {', '.join(offer1_names)}\n"
        f"–ü–æ–ª—É—á–∏–ª: {', '.join(offer2_names)}"
    )
    await context.bot.send_message(
        acceptor_id,
        f"{nhl_phrase}\n\n"
        f"–¢—ã –æ–±–º–µ–Ω—è–ª—Å—è!\n"
        f"–û—Ç–¥–∞–ª: {', '.join(offer2_names)}\n"
        f"–ü–æ–ª—É—á–∏–ª: {', '.join(offer1_names)}"
    )
    pending_trades.pop(initiator_id, None)
    pending_trades.pop(acceptor_id, None)

def get_card_name_rarity(card_id):
    card = get_card_from_cache(card_id)
    if card:
        return card["name"], card["rarity"]
    return "?", "common"

def get_rarity_emoji(rarity):
    return {
        "legendary": "‚≠êÔ∏è",
        "mythic": "üü•",
        "epic": "üíé",
        "rare": "üîµ",
        "common": "üü¢"
    }.get(rarity, "üü¢")

def remove_card(user_id, card_id):
    conn = get_db()
    c = conn.cursor()
    c.execute("DELETE FROM inventory WHERE user_id=? AND card_id=? LIMIT 1", (user_id, card_id))
    conn.commit()
    conn.close()

def add_card(user_id, card_id):
    conn = get_db()
    c = conn.cursor()
    c.execute("INSERT INTO inventory (user_id, card_id, time_got) VALUES (?, ?, ?)", (user_id, card_id, int(time.time())))
    conn.commit()
    conn.close()

def get_full_cards_for_user(user_id):
    conn = get_db()
    c = conn.cursor()
    c.execute("SELECT card_id FROM inventory WHERE user_id=?", (user_id,))
    ids = [r[0] for r in c.fetchall()]
    conn.close()

    count_dict = Counter(ids)
    cards = []
    total_count = 0
    for cid, cnt in count_dict.items():
        card = get_card_from_cache(cid)
        if not card:
            continue
        card_copy = card.copy()
        card_copy["count"] = cnt
        cards.append(card_copy)
        total_count += cnt

    return cards, total_count

def get_inventory_counts(user_id):
    """Return number of unique cards and total copies for user."""
    cards, total = get_full_cards_for_user(user_id)
    return len(cards), total

def get_all_club_keys():
    """Return sorted list of all club keys from team_en or team_ru."""
    conn = get_db()
    c = conn.cursor()
    c.execute(
        """
        SELECT DISTINCT COALESCE(team_en, team_ru) AS club
          FROM cards
         WHERE club IS NOT NULL AND club != ''
        """
    )
    clubs = sorted(r[0] for r in c.fetchall())
    conn.close()
    return clubs


def get_club_total_counts():
    conn = get_db()
    c = conn.cursor()
    c.execute(
        """
        SELECT COALESCE(team_en, team_ru) AS club,
               COUNT(DISTINCT id)
          FROM cards
         WHERE club IS NOT NULL AND club != ''
      GROUP BY club
        """
    )
    data = {row[0]: row[1] for row in c.fetchall()}
    conn.close()
    return data


def get_user_club_counts(user_id):
    conn = get_db()
    c = conn.cursor()
    c.execute(
        """
        SELECT COALESCE(cards.team_en, cards.team_ru) AS club,
               COUNT(DISTINCT cards.id)
          FROM inventory
          JOIN cards ON inventory.card_id = cards.id
         WHERE inventory.user_id = ?
           AND club IS NOT NULL AND club != ''
      GROUP BY club
        """,
        (user_id,)
    )
    data = {row[0]: row[1] for row in c.fetchall()}
    conn.close()
    return data


def get_user_club_cards(user_id, club_key):
    conn = get_db()
    c = conn.cursor()
    c.execute(
        """
        SELECT cards.id
          FROM inventory
          JOIN cards ON inventory.card_id = cards.id
         WHERE inventory.user_id = ?
           AND COALESCE(cards.team_en, cards.team_ru) = ?
        """,
        (user_id, club_key),
    )
    ids = [r[0] for r in c.fetchall()]
    conn.close()

    count_dict = Counter(ids)
    cards = []
    for cid, cnt in count_dict.items():
        card = get_card_from_cache(cid)
        if not card:
            continue
        card_copy = card.copy()
        card_copy["count"] = cnt
        cards.append(card_copy)
    return cards, sum(count_dict.values())

def get_team_cards(user_id):
    """Return list of card dicts from user's saved team."""
    team = db.get_team(user_id)
    if not team:
        return [], 0
    ids = team.get("lineup", []) + team.get("bench", [])
    cards = []
    for cid in ids:
        card = get_card_from_cache(cid)
        if card:
            cpy = card.copy()
            cpy["count"] = 1
            cards.append(cpy)
    return cards, len(cards)

def fetch_user_cards(user_id, rarity=None, club=None, new_only=False):
    conn = get_db()
    c = conn.cursor()
    query = (
        "SELECT cards.id, cards.name, cards.rarity, COUNT(*) as cnt "
        "FROM inventory JOIN cards ON inventory.card_id = cards.id "
        "WHERE inventory.user_id=?"
    )
    params = [user_id]
    if rarity:
        query += " AND cards.rarity=?"
        params.append(rarity)
    if club:
        query += " AND COALESCE(cards.team_en, cards.team_ru)=?"
        params.append(club)
    if new_only:
        query += " AND inventory.time_got >= ?"
        params.append(int(time.time()) - 86400)
    query += " GROUP BY cards.id, cards.name, cards.rarity"
    c.execute(query, params)
    rows = c.fetchall()
    conn.close()
    return rows

def build_filtered_cards(user_id, *, rarity=None, club=None, new_only=False, duplicates=False):
    """Return a sorted list of card dicts with count."""
    rows = fetch_user_cards(user_id, rarity=rarity, club=club, new_only=new_only)
    if duplicates:
        rows = [r for r in rows if r[3] > 1]
    cards = []
    for cid, name, rar, cnt in rows:
        card = get_card_from_cache(cid)
        if not card:
            continue
        cpy = card.copy()
        cpy["count"] = cnt
        cards.append(cpy)
    cards.sort(key=lambda c: (RARITY_ORDER.get(c.get("rarity", "common"), 99), c.get("name", "")))
    return cards

async def send_card_page(chat_id, context, cards, index=0, *, user_id=None, edit=False, message_id=None):
    """Send or edit a single card with navigation buttons."""
    if not cards:
        await context.bot.send_message(chat_id, "–£ —Ç–µ–±—è –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ —ç—Ç–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É.")
        return
    index = max(0, min(index, len(cards) - 1))
    card = cards[index]
    # progress info
    state = context.user_data.get("coll", {})
    if state.get("rarity"):
        filter_name = f"{RARITY_RU_SHORT.get(state['rarity'], state['rarity'])}"
    elif state.get("club"):
        filter_name = state["club"]
    elif state.get("duplicates"):
        filter_name = "–ü–æ–≤—Ç–æ—Ä–∫–∏"
    elif state.get("new_only"):
        filter_name = "–ù–æ–≤—ã–µ"
    elif state.get("team"):
        filter_name = "–í –∫–æ–º–∞–Ω–¥–µ"
    else:
        filter_name = "–í—Å–µ"
    total_cards = None
    if user_id:
        _, total_cards = get_inventory_counts(user_id)
    caption = format_card_caption(
        card,
        index=index,
        total=len(cards),
        filter_name=filter_name,
        total_cards=total_cards,
        show_filter=True,
    )

    nav = []
    if index > 0:
        nav.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data="coll_prev"))
    if index < len(cards) - 1:
        nav.append(InlineKeyboardButton("‚û°Ô∏è", callback_data="coll_next"))
    rows = []
    if nav:
        rows.append(nav)
    rows.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="coll_back")])
    markup = InlineKeyboardMarkup(rows)

    try:
        if edit and message_id:
            await context.bot.edit_message_media(
                chat_id=chat_id,
                message_id=message_id,
                media=InputMediaPhoto(card.get("img", ""), caption=caption, parse_mode="Markdown"),
                reply_markup=markup,
            )
        else:
            await context.bot.send_photo(
                chat_id,
                card.get("img", ""),
                caption=caption,
                parse_mode="Markdown",
                reply_markup=markup,
            )
    except BadRequest:
        if edit and message_id:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=caption,
                reply_markup=markup,
                parse_mode="Markdown",
            )
        else:
            await context.bot.send_message(chat_id, caption, reply_markup=markup, parse_mode="Markdown")

async def send_collection_page(
    chat_id,
    user_id,
    context,
    page=0,
    *,
    rarity=None,
    club=None,
    new_only=False,
    duplicates=False,
    edit_message=False,
    message_id=None,
):
    rows = fetch_user_cards(user_id, rarity=rarity, club=club, new_only=new_only)
    if duplicates:
        rows = [r for r in rows if r[3] > 1]

    card_info = []
    for cid, name, rar, cnt in rows:
        idx = RARITY_ORDER.get(rar, 99)
        card_info.append((idx, name, cid, cnt, rar))

    if not card_info:
        await context.bot.send_message(chat_id, "–£ —Ç–µ–±—è –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ —ç—Ç–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É.")
        return

    card_info.sort(key=lambda x: (x[0], x[1]))
    start = page * CARDS_PER_PAGE
    end = start + CARDS_PER_PAGE
    page_cards = card_info[start:end]
    if not page_cards:
        await context.bot.send_message(chat_id, "–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫.")
        return

    grouped = {}
    for _, name, cid, count, rar in page_cards:
        grouped.setdefault(rar, []).append((name, count))

    lines = []
    for rar in ["legendary", "mythic", "epic", "rare", "common"]:
        items = grouped.get(rar)
        if not items:
            continue
        lines.append(f"{RARITY_EMOJI.get(rar,'')} {RARITY_RU_PLURAL[rar]}:")
        for name, count in items:
            suffix = f" x{count}" if count > 1 else ""
            lines.append(f"‚Ä¢ {name}{suffix}")
        lines.append("")

    total_cards = sum(r[3] for r in card_info)
    unique_total = len(card_info)
    total_pages = (len(card_info) + CARDS_PER_PAGE - 1) // CARDS_PER_PAGE

    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="coll_prev"))
    if page < total_pages - 1:
        nav.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è", callback_data="coll_next"))

    rows = []
    if nav:
        rows.append(nav)
    rows.append([InlineKeyboardButton("üîô –í –∫–æ–ª–ª–µ–∫—Ü–∏—é", callback_data="coll_back")])
    markup = InlineKeyboardMarkup(rows)

    title = "üì¶ –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏"
    if rarity:
        title = f"{RARITY_EMOJI.get(rarity, '')} {RARITY_RU_SHORT.get(rarity, rarity)}"
    elif club:
        title = f"üèí {club}"
    elif duplicates:
        title = "‚ôªÔ∏è –ü–æ–≤—Ç–æ—Ä–∫–∏"
    elif new_only:
        title = "üÜï –ù–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏"

    text = (
        f"{title} (—Å—Ç—Ä. {page+1} –∏–∑ {total_pages}):\n\n" + "\n".join(lines).rstrip()
        + f"\n\n–í—Å–µ–≥–æ —É —Ç–µ–±—è: {total_cards} –∫–∞—Ä—Ç–æ—á–µ–∫ (—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {unique_total})"
    )

    if edit_message and message_id:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=markup,
        )
    else:
        await context.bot.send_message(chat_id, text, reply_markup=markup)

def get_referral_count(user_id):
    conn = get_db()
    c = conn.cursor()
    c.execute("SELECT referrals_count FROM users WHERE id=?", (user_id,))
    row = c.fetchone()
    conn.close()
    return row[0] if row else 0

def get_ref_achievement(count: int) -> str:
    """Return single-line achievement label for given referral count."""
    if count >= 20:
        return "üèÜ –õ–µ–≥–µ–Ω–¥–∞"
    if count >= 10:
        return "ü•à –ö–∞–ø–∏—Ç–∞–Ω"
    if count >= 5:
        return "ü•â –ú–∞–ª–µ–Ω—å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞"
    return ""

def get_referral_achievements(count):
    out = []
    if count >= 3:
        out.append("ü•â 3 –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö ‚Äî –ü–µ—Ä–≤—ã–π –¥—Ä—É–≥")
    if count >= 5:
        out.append("ü•à 5 –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö ‚Äî –ú–∞–ª–µ–Ω—å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞")
    if count >= 10:
        out.append("üèÖ 10 –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö ‚Äî –õ–∏–¥–µ—Ä –¥–≤–æ—Ä–∞")
    if count >= 20:
        out.append("ü•á 20 –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö ‚Äî –õ–µ–≥–µ–Ω–¥–∞ NHL")
    if count >= 50:
        out.append("üèÜ 50 –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö ‚Äî –í–¥–æ—Ö–Ω–æ–≤–∏—Ç–µ–ª—å —Ç–æ–ª–ø—ã")
    return "\n".join(out) if out else "‚Äî –ü–æ–∫–∞ –Ω–µ—Ç –∞—á–∏–≤–æ–∫"

async def invite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    link = f"https://t.me/{context.bot.username}?start={user_id}"
    referrals = get_referral_count(user_id)
    achv = get_referral_achievements(referrals)
    text = (
        "ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ –∞—á–∏–≤–∫–∏!\n"
        "‚ÄºÔ∏è –ö–æ–≥–¥–∞ –¥—Ä—É–≥ –∑–∞—Ö–æ–¥–∏—Ç –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ ‚Äî —Ç–≤–æ–π –∫—É–ª–¥–∞—É–Ω –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –°–†–ê–ó–£ –°–ë–†–ê–°–´–í–ê–ï–¢–°–Ø!\n\n"
        f"–¢–≤–æ—è —Å—Å—ã–ª–∫–∞: {link}\n\n"
        f"–£–∂–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {referrals}\n"
        f"{achv}"
    )
    btn = InlineKeyboardButton("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", url=link)
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup([[btn]]))


async def topref(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db()
    c = conn.cursor()
    c.execute(
        "SELECT id, username, referrals_count, level FROM users ORDER BY referrals_count DESC"
    )
    rows = [(uid, uname, cnt, lvl) for uid, uname, cnt, lvl in c.fetchall() if not is_admin(uid)]
    conn.close()
    if not rows:
        await _send_rank_text(update, "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—à–∞–ª –¥—Ä—É–∑–µ–π.")
        return

    lines = ["ü´Ç –¢–û–ü –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º:", ""]
    for i, (uid, username, count, lvl) in enumerate(rows[:10], 1):
        name = f"@{username}" if username else f"ID:{uid}"
        lines.append(f"{i}. {name}")
        lines.append(f"ü´Ç {count}  üîº {lvl} —É—Ä.")
        lines.append("")

    user_id = update.effective_user.id
    total = len(rows)
    idx = next((j for j,(uid,_,_,_) in enumerate(rows) if uid == user_id), total-1)
    rank = idx + 1
    my_cnt = rows[idx][2] if idx < len(rows) else 0
    _, my_lvl = db.get_xp_level(user_id)
    lines.append(f"üëÄ –¢—ã ‚Äî #{rank} –∏–∑ {total}")
    lines.append(f"ü´Ç {my_cnt}  üîº {my_lvl} —É—Ä.")
    if rank > 1:
        diff = rows[rank-2][2] - my_cnt
        lines.append(f"üöÄ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—Ç–∞: {diff} –ø—Ä–∏–≥–ª–∞—à.")

    text = "\n".join(lines).rstrip()
    await _send_rank_text(update, text)


@require_subscribe
async def topweek(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db()
    c = conn.cursor()
    c.execute("SELECT id, username, level FROM users")
    rows = [(uid, uname, lvl) for uid, uname, lvl in c.fetchall() if not is_admin(uid)]
    conn.close()

    progress_list = []
    for uid, uname, lvl in rows:
        prog = get_weekly_progress(uid)
        progress_list.append((uid, uname, prog, lvl))
    progress_list.sort(key=lambda x: x[2], reverse=True)

    lines = ["‚ö°Ô∏è –ü—Ä–∏—Ä–æ—Å—Ç –∑–∞ –Ω–µ–¥–µ–ª—é:", ""]
    for i, (uid, uname, prog, lvl) in enumerate(progress_list[:10], 1):
        name = f"@{uname}" if uname else f"ID:{uid}"
        lines.append(f"{i}. {name}")
        lines.append(f"‚ö°Ô∏è +{shorten_number(int(prog))}  üîº {lvl} —É—Ä.")
        lines.append("")

    user_id = update.effective_user.id
    my_prog = get_weekly_progress(user_id)
    total = len(progress_list)
    rank = next((idx + 1 for idx, (uid, *_ ) in enumerate(progress_list) if uid == user_id), total)
    _, my_lvl = db.get_xp_level(user_id)
    lines.append(f"üëÄ –¢—ã ‚Äî #{rank} –∏–∑ {total}")
    lines.append(f"‚ö°Ô∏è +{shorten_number(int(my_prog))}  üîº {my_lvl} —É—Ä.")
    if rank > 1:
        diff = int(progress_list[rank-2][2] - my_prog)
        lines.append(f"üöÄ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—Ç–∞: {shorten_number(diff)} –æ—á–∫–æ–≤")

    text = "\n".join(lines).rstrip()
    await _send_rank_text(update, text)


@require_subscribe
async def topxp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db()
    c = conn.cursor()
    if ADMINS:
        placeholders = ','.join('?' for _ in ADMINS)
        query = f"SELECT id, username, level, xp FROM users WHERE id NOT IN ({placeholders}) ORDER BY level DESC, xp DESC"
        c.execute(query, tuple(ADMINS))
    else:
        query = "SELECT id, username, level, xp FROM users ORDER BY level DESC, xp DESC"
        c.execute(query)
    rows = c.fetchall()
    conn.close()

    lines = ["üîº –¢–û–ü –ø–æ —É—Ä–æ–≤–Ω—é:", ""]
    top_rows = rows[:10]
    scores = await asyncio.gather(*[get_user_score_cached(r[0]) for r in top_rows])
    for i, ((uid, uname, lvl, _), score) in enumerate(zip(top_rows, scores), 1):
        name = f"@{uname}" if uname else f"ID:{uid}"
        lines.append(f"{i}. {name}")
        lines.append(f"üîº {lvl} —É—Ä.  üî• {shorten_number(int(score))} –æ—á–∫–æ–≤")
        lines.append("")

    user_id = update.effective_user.id
    total = len(rows)
    rank = next((idx + 1 for idx, (uid, *_ ) in enumerate(rows) if uid == user_id), total)
    xp_val = next((xp for uid, _, _, xp in rows if uid == user_id), 0)
    score = int(await get_user_score_cached(user_id))
    _, user_lvl = db.get_xp_level(user_id)
    lines.append(f"üëÄ –¢—ã ‚Äî #{rank} –∏–∑ {total}")
    lines.append(f"üîº {user_lvl} —É—Ä.  üî• {shorten_number(score)} –æ—á–∫–æ–≤")
    if rank > 1:
        diff = rows[rank-2][3] - xp_val
        lines.append(f"üöÄ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—Ç–∞: {shorten_number(diff)} XP")

    text = "\n".join(lines).rstrip()
    await _send_rank_text(update, text)


@require_subscribe
async def rank_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = update.callback_query.data
    if data == "rank_top":
        await top(update, context)
    elif data == "rank_xp":
        await topxp(update, context)
    elif data == "rank_ref":
        await topref(update, context)
    elif data == "rank_week":
        await topweek(update, context)


@require_subscribe
async def rank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show rating menu with inline buttons."""
    buttons = [
        [InlineKeyboardButton("üèÜ –¢–û–ü –ø–æ –æ—á–∫–∞–º", callback_data="rank_top")],
        [InlineKeyboardButton("üîº –¢–û–ü –ø–æ —É—Ä–æ–≤–Ω—é", callback_data="rank_xp")],
        [InlineKeyboardButton("ü´Ç –¢–û–ü –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º", callback_data="rank_ref")],
        [InlineKeyboardButton("‚ö°Ô∏è –ü—Ä–∏—Ä–æ—Å—Ç –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="rank_week")],
    ]
    await update.message.reply_text(
        "üìä –í—ã–±–µ—Ä–∏ —Ä–µ–π—Ç–∏–Ω–≥:", reply_markup=InlineKeyboardMarkup(buttons)
    )


def _collection_root_markup():
    buttons = [
        [InlineKeyboardButton("üíé –†–µ–¥–∫–æ—Å—Ç—å", callback_data="coll_filter_rarity")],
        [InlineKeyboardButton("üèí –ö–ª—É–±—ã", callback_data="coll_filter_club")],
        [InlineKeyboardButton("‚ôªÔ∏è –ü–æ–≤—Ç–æ—Ä–∫–∏", callback_data="coll_filter_dupes")],
        [InlineKeyboardButton("üÜï –ù–æ–≤—ã–µ", callback_data="coll_filter_new")],
        [InlineKeyboardButton("üßä –í –∫–æ–º–∞–Ω–¥–µ", callback_data="coll_filter_team")],
        [InlineKeyboardButton("üì¶ –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="coll_all")],
    ]
    return InlineKeyboardMarkup(buttons)


def _reset_collection_state(context: ContextTypes.DEFAULT_TYPE) -> None:
    """Remove current collection view state."""
    context.user_data.pop("coll", None)


async def send_club_list_page(chat_id, context, user_id, page=0, *, edit=False, message_id=None):
    all_keys = get_all_club_keys()
    totals = get_club_total_counts()
    user_cnt = get_user_club_counts(user_id)
    per_page = 8
    total_pages = (len(all_keys) + per_page - 1) // per_page
    page = max(0, min(page, total_pages - 1))
    start = page * per_page
    end = start + per_page
    page_keys = all_keys[start:end]
    buttons = []
    for key in page_keys:
        have = user_cnt.get(key, 0)
        total = totals.get(key, 0)
        label = f"{key} ‚Äî {have} –∏–∑ {total}"
        buttons.append([InlineKeyboardButton(label, callback_data=f"coll_club_{key}")])

    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"coll_clubpage_{page-1}"))
    nav.append(InlineKeyboardButton("üîô –í –∫–æ–ª–ª–µ–∫—Ü–∏—é", callback_data="coll_back"))
    if page < total_pages - 1:
        nav.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è", callback_data=f"coll_clubpage_{page+1}"))
    markup = InlineKeyboardMarkup(buttons + ([nav] if nav else []))

    text = "–í—ã–±–µ—Ä–∏ –∫–ª—É–±:"
    if edit and message_id:
        await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, reply_markup=markup)
    else:
        await context.bot.send_message(chat_id, text, reply_markup=markup)


async def collection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    _reset_collection_state(context)
    context.user_data["coll_nav"] = ["collection"]
    await update.message.reply_text(
        "üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π:", reply_markup=_collection_root_markup()
    )


async def collection_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    uid = query.from_user.id
    await query.answer()

    nav = context.user_data.setdefault("coll_nav", ["collection"])

    async def show_state(state):
        async def send_or_edit(text: str, markup: InlineKeyboardMarkup):
            if query.message and query.message.photo:
                await query.message.delete()
                await context.bot.send_message(query.message.chat_id, text, reply_markup=markup)
            else:
                await query.edit_message_text(text, reply_markup=markup)

        if state == "collection":
            await send_or_edit("üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π:", _collection_root_markup())
            return
        if state == "rarity_select":
            buttons = [
                [InlineKeyboardButton(f"{RARITY_EMOJI.get(r,'')} {RARITY_RU_SHORT[r]}", callback_data=f"coll_rarity_{r}")]
                for r in ["legendary", "mythic", "epic", "rare", "common"]
            ]
            buttons.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="coll_back")])
            await send_or_edit("–í—ã–±–µ—Ä–∏ —Ä–µ–¥–∫–æ—Å—Ç—å:", InlineKeyboardMarkup(buttons))
            return
        if state.startswith("rarity_"):
            rarity = state.split("_", 1)[1]
            cards = build_filtered_cards(uid, rarity=rarity)
            context.user_data["coll"] = {"rarity": rarity, "mode": "carousel", "index": 0, "cards": cards}
            await send_card_page(query.message.chat_id, context, cards, index=0, user_id=uid, edit=True, message_id=query.message.message_id)
            return
        if state.startswith("clubpage_"):
            page = int(state.split("_")[1])
            if query.message and query.message.photo:
                await query.message.delete()
                await send_club_list_page(query.message.chat_id, context, uid, page=page)
            else:
                await send_club_list_page(query.message.chat_id, context, uid, page=page, edit=True, message_id=query.message.message_id)
            return
        if state.startswith("club_"):
            club = state[5:]
            cards = build_filtered_cards(uid, club=club)
            context.user_data["coll"] = {"club": club, "mode": "carousel", "index": 0, "cards": cards}
            await send_card_page(query.message.chat_id, context, cards, index=0, user_id=uid, edit=True, message_id=query.message.message_id)
            return
        if state == "duplicates":
            cards = build_filtered_cards(uid, duplicates=True)
            context.user_data["coll"] = {"duplicates": True, "mode": "carousel", "index": 0, "cards": cards}
            await send_card_page(query.message.chat_id, context, cards, index=0, user_id=uid, edit=True, message_id=query.message.message_id)
            return
        if state == "new":
            cards = build_filtered_cards(uid, new_only=True)
            context.user_data["coll"] = {"new_only": True, "mode": "carousel", "index": 0, "cards": cards}
            await send_card_page(query.message.chat_id, context, cards, index=0, user_id=uid, edit=True, message_id=query.message.message_id)
            return
        if state == "team":
            cards, _ = get_team_cards(uid)
            context.user_data["coll"] = {"team": True, "mode": "carousel", "index": 0, "cards": cards}
            await send_card_page(query.message.chat_id, context, cards, index=0, user_id=uid, edit=True, message_id=query.message.message_id)
            return
        if state.startswith("all_page_"):
            page = int(state.split("_")[2])
            context.user_data["coll"] = {"page": page, "mode": "list"}
            await send_collection_page(query.message.chat_id, uid, context, page=page, edit_message=True, message_id=query.message.message_id)
            return

    if data == "coll_back":
        if len(nav) > 1:
            nav.pop()
        state = nav[-1]
        context.user_data["coll_nav"] = nav
        _reset_collection_state(context)
        await show_state(state)
        return

    if data == "coll_filter_rarity":
        nav.append("rarity_select")
        context.user_data["coll_nav"] = nav
        await show_state("rarity_select")
        return

    if data.startswith("coll_rarity_"):
        rarity = data.split("_", 2)[2]
        nav.append(f"rarity_{rarity}")
        context.user_data["coll_nav"] = nav
        await show_state(f"rarity_{rarity}")
        return

    if data == "coll_filter_club":
        nav.append("clubpage_0")
        context.user_data["coll_nav"] = nav
        await send_club_list_page(query.message.chat_id, context, uid, page=0, edit=True, message_id=query.message.message_id)
        return

    if data.startswith("coll_clubpage_"):
        page = int(data.split("_")[2])
        nav.append(f"clubpage_{page}")
        context.user_data["coll_nav"] = nav
        await send_club_list_page(query.message.chat_id, context, uid, page=page, edit=True, message_id=query.message.message_id)
        return

    if data.startswith("coll_club_"):
        club = data.replace("coll_club_", "", 1)
        nav.append(f"club_{club}")
        context.user_data["coll_nav"] = nav
        await show_state(f"club_{club}")
        return

    if data == "coll_filter_dupes":
        nav.append("duplicates")
        context.user_data["coll_nav"] = nav
        await show_state("duplicates")
        return

    if data == "coll_filter_new":
        nav.append("new")
        context.user_data["coll_nav"] = nav
        await show_state("new")
        return

    if data == "coll_filter_team":
        nav.append("team")
        context.user_data["coll_nav"] = nav
        await show_state("team")
        return

    if data == "coll_all":
        nav.append("all_page_0")
        context.user_data["coll_nav"] = nav
        context.user_data["coll"] = {"page": 0, "mode": "list"}
        await send_collection_page(query.message.chat_id, uid, context, page=0, edit_message=True, message_id=query.message.message_id)
        return

    if data in {"coll_next", "coll_prev"}:
        state = context.user_data.get("coll", {})
        if state.get("mode") == "carousel":
            idx = state.get("index", 0)
            if data == "coll_next":
                idx += 1
            else:
                idx = max(0, idx - 1)
            cards = state.get("cards", [])
            idx = max(0, min(idx, len(cards) - 1))
            state["index"] = idx
            context.user_data["coll"] = state
            await send_card_page(
                query.message.chat_id,
                context,
                cards,
                index=idx,
                user_id=uid,
                edit=True,
                message_id=query.message.message_id,
            )
        else:
            page = state.get("page", 0)
            if data == "coll_next":
                page += 1
            else:
                page = max(0, page - 1)
            state["page"] = page
            context.user_data["coll"] = state
            if context.user_data.get("coll_nav"):
                context.user_data["coll_nav"][-1] = f"all_page_{page}"
            await send_collection_page(
                query.message.chat_id,
                uid,
                context,
                page=page,
                rarity=state.get("rarity"),
                club=state.get("club"),
                new_only=state.get("new_only", False),
                duplicates=state.get("duplicates", False),
                edit_message=True,
                message_id=query.message.message_id,
            )
        return



async def myid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–¢–≤–æ–π Telegram user_id: {update.effective_user.id}")

@admin_only
async def nocooldown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in admin_no_cooldown:
        admin_no_cooldown.remove(user_id)
        await update.message.reply_text("‚ùÑÔ∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–µ–Ω–æ –¥–ª—è –≤–∞—Å.")
    else:
        admin_no_cooldown.add(user_id)
        await update.message.reply_text("üî• –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤–∞—Å –æ—Ç–∫–ª—é—á–µ–Ω–æ!")

@admin_only
async def deletecard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: /deletecard –ö–æ–Ω–Ω–æ—Ä –ú–∞–∫–î—ç–≤–∏–¥)")
        return
    name = " ".join(context.args)
    conn = get_db()
    c = conn.cursor()
    c.execute('SELECT id FROM cards WHERE name = ?', (name,))
    row = c.fetchone()
    if not row:
        await update.message.reply_text(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∏–º–µ–Ω–µ–º: {name}")
    else:
        c.execute('DELETE FROM cards WHERE id = ?', (row[0],))
        conn.commit()
        await update.message.reply_text(f"–ö–∞—Ä—Ç–æ—á–∫–∞ –∏–≥—Ä–æ–∫–∞ '{name}' —É–¥–∞–ª–µ–Ω–∞.")
        refresh_card_cache(row[0])
    conn.close()

@admin_only
async def giveallcards(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    conn = get_db()
    c = conn.cursor()
    c.execute("SELECT id FROM cards")
    all_ids = {row[0] for row in c.fetchall()}
    c.execute("SELECT card_id FROM inventory WHERE user_id=?", (user_id,))
    have_ids = {row[0] for row in c.fetchall()}
    missing = all_ids - have_ids

    now = int(time.time())
    for cid in missing:
        c.execute(
            "INSERT INTO inventory (user_id, card_id, time_got) VALUES (?, ?, ?)",
            (user_id, cid, now),
        )
    conn.commit()
    conn.close()

    await update.message.reply_text(
        f"‚úÖ –í—ã–¥–∞–Ω–æ {len(missing)} –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫."
    )

    admin_edit_state = {}  # user_id: {step, card_id}
EDIT_CARDS_PER_PAGE = 20

@admin_only
async def editcard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    admin_edit_state[user_id] = {"step": "list"}
    await send_editcard_list(update.message.chat_id, context, 0, user_id)

async def send_editcard_list(chat_id, context, page, user_id, edit_message_id=None):
    conn = get_db()
    c = conn.cursor()
    c.execute("SELECT id, name, rarity FROM cards ORDER BY rarity, name")
    cards = c.fetchall()
    conn.close()
    total = len(cards)
    total_pages = (total + EDIT_CARDS_PER_PAGE - 1) // EDIT_CARDS_PER_PAGE
    start = page * EDIT_CARDS_PER_PAGE
    end = start + EDIT_CARDS_PER_PAGE
    page_cards = cards[start:end]
    buttons = []
    for cid, name, rarity in page_cards:
        text = f"{name} ({RARITY_RU.get(rarity, rarity)})"
        buttons.append([InlineKeyboardButton(text, callback_data=f"adminedit_{cid}")])
    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"admineditpage_{page-1}"))
    if page < total_pages - 1:
        nav.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"admineditpage_{page+1}"))
    markup = InlineKeyboardMarkup(buttons + ([nav] if nav else []))
    msg = f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å—Ç—Ä {page+1} –∏–∑ {total_pages}):"
    if edit_message_id:
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=edit_message_id,
                text=msg,
                reply_markup=markup
            )
        except BadRequest as e:
            if "Message is not modified" in str(e):
                pass  # –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            else:
                raise
    else:
        await context.bot.send_message(chat_id, msg, reply_markup=markup)

async def editcard_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    if data.startswith("admineditpage_"):
        page = int(data.split("_")[1])
        await send_editcard_list(query.message.chat_id, context, page, user_id, query.message.message_id)
        await query.answer()
        return

    # –í—ã–±–æ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏
    if data.startswith("adminedit_"):
        card_id = int(data.split("_")[1])
        admin_edit_state[user_id] = {"step": "choose_action", "card_id": card_id}
        markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—á–∫–∏/—Å—Ç–∞—Ç—ã", callback_data="admineditstat")],
            [InlineKeyboardButton("‚≠êÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–¥–∫–æ—Å—Ç—å", callback_data="admineditrarity")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="admineditpage_0")]
        ])
        # –ü–æ–ª—É—á–∏–º –∏–º—è –∫–∞—Ä—Ç–æ—á–∫–∏
        card = get_card_from_cache(card_id)
        name = card["name"] if card else "–∫–∞—Ä—Ç–æ—á–∫–∞"
        text = f"–í—ã–±—Ä–∞–Ω–∞: <b>{name}</b>\n–ß—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?"
        await query.edit_message_text(text, reply_markup=markup, parse_mode='HTML')
        await query.answer()
        return

    # –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è (–æ—á–∫–∏ –∏–ª–∏ —Ä–µ–¥–∫–æ—Å—Ç—å)
    if data == "admineditstat":
        admin_edit_state[user_id]["step"] = "edit_stats"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è <b>stats</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: –û—á–∫–∏ 88 –∏–ª–∏ –ü–æ–± 33 –ö–ù 2.22):", parse_mode='HTML')
        await query.answer()
        return
    if data == "admineditrarity":
        admin_edit_state[user_id]["step"] = "edit_rarity"
        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–¥–∫–æ—Å—Ç–µ–π
        buttons = [
            [InlineKeyboardButton(RARITY_RU[r], callback_data=f"adminsetrarity_{r}")]
            for r in RARITY_ORDER.keys()
        ]
        markup = InlineKeyboardMarkup(buttons)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–µ–¥–∫–æ—Å—Ç—å:", reply_markup=markup)
        await query.answer()
        return

    # –í—ã–±–æ—Ä —Ä–µ–¥–∫–æ—Å—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
    if data.startswith("adminsetrarity_"):
        rarity = data.split("_")[1]
        card_id = admin_edit_state[user_id].get("card_id")
        if not card_id:
            await query.answer("–û—à–∏–±–∫–∞! –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
            return
        conn = get_db()
        c = conn.cursor()
        c.execute("UPDATE cards SET rarity = ? WHERE id = ?", (rarity, card_id))
        c.execute("SELECT name FROM cards WHERE id = ?", (card_id,))
        row = c.fetchone()
        conn.commit()
        name = row[0] if row else "–∫–∞—Ä—Ç–æ—á–∫–∞"
        conn.close()
        refresh_card_cache(card_id)
        await query.edit_message_text(f"‚úÖ –†–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ <b>{name}</b> –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {RARITY_RU[rarity]}", parse_mode='HTML')
        admin_edit_state.pop(user_id, None)
        await query.answer()
        return

async def admin_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in admin_edit_state:
        return
    state = admin_edit_state[user_id]
    if state.get("step") == "edit_stats":
        card_id = state.get("card_id")
        new_stats = update.message.text
        conn = get_db()
        c = conn.cursor()
        c.execute("UPDATE cards SET stats = ? WHERE id = ?", (new_stats, card_id))
        c.execute("SELECT name FROM cards WHERE id = ?", (card_id,))
        row = c.fetchone()
        conn.commit()
        name = row[0] if row else "–∫–∞—Ä—Ç–æ—á–∫–∞"
        conn.close()
        refresh_card_cache(card_id)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª–µ <b>stats</b> –∫–∞—Ä—Ç–æ—á–∫–∏ <b>{name}</b> –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: <code>{new_stats}</code>", parse_mode='HTML')
        admin_edit_state.pop(user_id, None)

TEMP_DICTS = [
    pending_trades,
    trade_confirmations,
    admin_edit_state,
]

async def cleanup_expired(context: ContextTypes.DEFAULT_TYPE):
    now = time.time()
    TTL = 24 * 3600
    for d in TEMP_DICTS:
        for k in list(d.keys()):
            created = d[k].get("created", now)
            if now - created > TTL:
                d.pop(k, None)

async def post_init(application: Application):
    bot_commands = [
        BotCommand("start", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å–ø—Ä–∞–≤–∫–∞"),
        BotCommand("card", "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É"),
        BotCommand("rank", "–ú–µ–Ω—é —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"),
        BotCommand("collection", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π"),
        BotCommand("myid", "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π user_id"),
        BotCommand("me", "–¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å"),
        BotCommand("trade", "–û–±–º–µ–Ω –∫–∞—Ä—Ç–∞–º–∏ –ø–æ ID"),
        BotCommand("team", "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"),
        BotCommand("fight", "–ë–æ–π —Å –±–æ—Ç–æ–º"),
        BotCommand("duel", "–î—É—ç–ª—å —Å –∏–≥—Ä–æ–∫–æ–º"),
        BotCommand("duel_list", "–°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –¥—É—ç–ª—å"),
        BotCommand("history", "–ò—Å—Ç–æ—Ä–∏—è –±–æ—ë–≤"),
        BotCommand("invite", "–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ –∞—á–∏–≤–∫–∏!"),
    ]
    await application.bot.set_my_commands(bot_commands)


def safe_polling(app):
    while True:
        try:
            app.run_polling()
        except NetworkError as e:
            logging.warning(f"Network error: {e}. Retrying in 10 sec...")
            time.sleep(10)
        except Exception as e:
            logging.exception("Unexpected error in polling:", exc_info=e)
            time.sleep(10)

def main():
    setup_db()
    db.setup_battle_db()
    db.setup_team_db()
    application = (
        Application.builder()
        .token(TOKEN)
        .post_init(post_init)
        .build()
    )
    application.job_queue.run_repeating(cleanup_expired, interval=3600)

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("card", card))
    application.add_handler(CommandHandler("myid", myid))
    application.add_handler(CommandHandler("nocooldown", nocooldown))
    application.add_handler(CommandHandler("deletecard", deletecard))
    application.add_handler(CommandHandler("giveallcards", giveallcards))
    application.add_handler(CommandHandler("me", me))
    application.add_handler(CommandHandler("xp", xp))
    application.add_handler(CommandHandler("topxp", topxp))
    application.add_handler(CommandHandler("resetweek", resetweek))
    application.add_handler(CommandHandler("trade", trade))
    application.add_handler(CallbackQueryHandler(trade_callback, pattern="^trade_"))
    application.add_handler(CommandHandler("collection", collection))
    application.add_handler(CallbackQueryHandler(collection_callback, pattern="^coll_"))
    application.add_handler(CallbackQueryHandler(trade_page_callback, pattern="^trade_page_(prev|next)$"))
    application.add_handler(CommandHandler("editcard", editcard))
    application.add_handler(CallbackQueryHandler(editcard_callback, pattern="^(adminedit|admineditpage|admineditstat|admineditrarity|adminsetrarity)_?"))
    application.add_handler(CommandHandler("myteam", handlers.show_my_team))
    application.add_handler(
        MessageHandler(filters.TEXT & (~filters.COMMAND), admin_text_handler),
        group=5,
    )
    application.add_handler(CallbackQueryHandler(check_subscribe_callback, pattern="^check_subscribe$"))
    application.add_handler(CommandHandler("invite", invite))
    application.add_handler(CommandHandler("rank", rank))
    application.add_handler(CallbackQueryHandler(rank_callback, pattern="^rank_"))
    application.add_handler(CommandHandler("team", handlers.create_team))
    application.add_handler(CallbackQueryHandler(handlers.team_callback, pattern="^team_"))
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handlers.team_text_handler))
    application.add_handler(CommandHandler("fight", handlers.start_fight))
    application.add_handler(CommandHandler("duel", handlers.start_duel))
    application.add_handler(CommandHandler("duel_list", handlers.duel_list))
    application.add_handler(CommandHandler("history", handlers.show_battle_history))
    application.add_handler(CallbackQueryHandler(handlers.tactic_callback, pattern="^tactic_"))
    application.add_handler(CallbackQueryHandler(handlers.duel_callback, pattern="^(challenge_\\d+|duel_cancel)$"))
    application.add_handler(CallbackQueryHandler(handlers.log_callback, pattern="^log_(prev|next|close)$"))






    safe_polling(application)

if __name__ == "__main__":
    import logging
    logging.basicConfig(level=logging.INFO)
    main()
